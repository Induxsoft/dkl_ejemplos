#include "dkli.dkh"
#!
program "Fundamentos de programación con DevKron"
{
    do print("Hola Mundo")

    // Variables de tipo-valor
    nombre = "Juan"
    edad = 18
    // boolean = @true
    // boolean = @false

    // Variables de referencia
    ref variable_de_referencia = @null

    @variable_global = 1
    variable_local = 0

    // Operadores lógicos: && || == <= != >= < >
    // Operadores matemáticos: * / + -
    // Operadores especiales: := << >>

    expresion = (edad >= 18)
    nombre = nombre + " Pérez" //Juan Pérez

    // SENTENCIAS DE CONTROL DE FLUJO
    if expresion || (1 == 1)
    {
        do print("Verdadero")
    }
    else
    {
        do print("Falso")
    }

    switch edad
    {
        case 16
        {
            do print("Dieciseis")
            break
        }
        case 17
        {
            do print("Diecisiete")
            break
        }
        default
        {
            do print("Valor no encontrado")
            break
        }
    }

    // include "ruta/archivo.dkl" // Inserta el código de un archivo dkl
    // return edad // Devuelve el valor que se le indique
    // do // Permite invocar o llamar funciones

    // CICLOS
    for i = 1; i <= 5; i+2
    {
        do print(i)
    }

    contador = 0
    while contador < 5
    {
        do print(contador)
        contador = contador + 1
    }

    repeat 5
    {
        do print("repitiendo...")
    }

    // Registros de datos
    new registro
    {
        @"prop1": "Valor 1"
        @"prop2": 2
        prop3 := 3 //Asignación con el operador morsa `:=`
    }
    // Salida: {"prop1":"Valor 1", "prop2":2, "prop3":3}
    using registro
    {
        prop1 := 1
        prop4 := 4
        @"prop5": 5
    }
    // Salida: {"prop1":1, "prop2":2, "prop3":3, "prop4":4, "prop5": 5}

    // Operador de estructuración `>>`
    prop6 = 6
    prop7 = 7
    prop8 = 8

    prop6, prop7, prop8 >> registro
    // Salida: {"prop1":1, "prop2":2, "prop3":3, "prop4":4, "prop5":5, "prop6":6, "prop7":7, "prop8":8}

    // Operador de des-estructuración `<<`
    prop1, prop2, prop3 << registro
    /**
    * prop1 = 1
    * prop2 = 2
    * prop3 = 3
    */

    var1 : registro<"prop1">
    var2 = registro.prop2

    do print(var1)
    do print(var2)
    
    registro<"prop9"> : 9
    // Salida: {"prop1":1, "prop2":2, "prop3":3, "prop4":4, "prop5":5, "prop6":6, "prop7":7, "prop8":8, "prop9":9}

    new registro2
    {
        @"prop1": "1"
    }
    
    registro2<"prop2*"> : registro
    registro2.prop3 := ref registro

    var3 : registro2<"prop2/prop8">
    var4 = registro2.prop3.prop9
    
    do print(var3)
    do print(var4)

    exception{/*ignorar*/}
}